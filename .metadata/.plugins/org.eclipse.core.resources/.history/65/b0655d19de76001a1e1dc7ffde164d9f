package QualificationRound;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.StringTokenizer;

public class WorkAssignment {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out=new PrintWriter(System.out);
		int t=Integer.parseInt(br.readLine());
		int caseN=1;
		
		while(t-->0){
	       
			StringTokenizer st;
			
			
			boolean isJamieBusy[]=new boolean[1441];
			boolean isCameronBusy[]=new boolean[1441];
			
			
			int n=Integer.parseInt(br.readLine());
			int[][] mat=new int[n][2];
			int[][] matSorted=mat.clone();
			char person = 'J';
			
			char chars[]=new char[n];
			Stack<int[]> JStack=new Stack<>();
			Stack<int[]> cStack=new Stack<>();
			
			boolean impossible=false;
			
			
			Map<int[],Integer> map=new HashMap<>();
			
			for(int i=0;i<mat.length;i++){
				st=new StringTokenizer(br.readLine());
				for(int j=0;j<mat[i].length;j++){
					mat[i][j]=Integer.parseInt(st.nextToken());
				}
				
				map.put(mat[i],i);
			}
			
			Arrays.sort(matSorted,new Comparator<int[]>() {
			@Override
			public int compare(int[] a,int[] b){
				return a[0]-b[0];
			}
			
			});
			
	      for(int i=0;i<matSorted.length;i++){
	    	  chars[map.get(matSorted[i])]=person;
	    	  
	    	  if(i<matSorted.length-1 && doesOverlap(matSorted[i], matSorted[i+1])){
	    		  if(person=='J'){
	    			  JStack.push(matSorted[i]);
	    			  person=getPerson(person);
	    			  
	    			  if(!cStack.isEmpty() && doesOverlap(cStack.peek(),matSorted[i+1])){
	    				  impossible=true;
	    				  break;
	    			  }
	    		  }else{
	    			  cStack.push(matSorted[i]);
	    			  person=getPerson(person);
	    			  
	    			  if(!JStack.isEmpty() && doesOverlap(JStack.peek(), matSorted[i+1])){
	    				  impossible=true;
	    				  break;
	    			  }
	    		  }
	    	  }else{
	    		  if(person=='J'){
	    			  JStack.push(matSorted[i]);
	    		  }else{
	    			  cStack.push(matSorted[i]);
	    		  }
	    	  }
	      }
			
		    if(impossible){
		    	out.println("Case #"+(caseN++)+": "+"IMPOSSIBLE");
		    }else{
		    	out.println("Case #"+(caseN++)+": "+new String(chars));
		    }
		   		    //caseN++;
			
		}
		out.flush();
		out.close();
		

	}
	
	static char getPerson(char p){
		return p=='J'?'C':'J';
	}
	
	static boolean doesOverlap(int[] a,int[] b){
		return a[1]>b[0];
	}

}

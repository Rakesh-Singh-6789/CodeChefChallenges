package Assignment1;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;



public class CheckFirst {


	public static int maxSum=0;
	public static int totalSum=0;
	public static int count=0;
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int cases=Integer.parseInt(br.readLine());
		StringTokenizer st;


		while(cases-->0){
			maxSum=0;
			int request=Integer.parseInt(br.readLine());
			int arr[][]=new int[4][4];
			Integer singleArr[]=new Integer[16];
			while(request-->0){
				st= new StringTokenizer(br.readLine());
				String m=st.nextToken();
				String t=st.nextToken();

				int row,col;

				if(m.equals("A")){
					row=0;
				}else if(m.equals("B")){
					row=1;
				}else if(m.equals("C")){
					row=2;
				}else{
					row=3;
				}

				if(t.equals("12")){
					col=0;
				}else if(t.equals("3")){
					col=1;
				}else if(t.equals("6")){
					col=2;
				}else{
					col=3;
				}
				//System.out.print(" "+m+" "+t);
				arr[row][col]+=1;



			}
			/*int k=0;
			for(int i=0;i<4;i++){
				for(int j=0;j<4;j++){
					singleArr[k++]=arr[i][j];
				}
			}

			Arrays.sort(singleArr,Collections.reverseOrder());

			for(int i=0;i<16;i++){
				System.out.print(singleArr[i]+ " ");
			}
			System.out.println();*/


			for(int i=0;i<4;i++){
				for(int j=0;j<4;j++){
					System.out.print(arr[i][j]+" ");
				}
				System.out.println();
			}
			System.out.println();

			/*FindMax(arr);*/
			//System.out.println(count);

			for(int i=0;i<4;i++){
				
				for(int j=0;j<4;j++){
					
					HashSet<Integer> rowSet=new HashSet<>();
					HashSet<Integer> colSet=new HashSet<>();
					ArrayList<Integer> list=new ArrayList<>();
					
					int num1=arr[i][j];
					rowSet.add(i);
					colSet.add(j);
					list.add(num1);
					
					for(int k=0;k<4;k++){
						
						if(rowSet.contains(k)){
							continue;
						}
						//rowSet.add(k);
						for(int l=0;l<4;l++){
							if(colSet.contains(l) || rowSet.contains(k)){
								continue;
							}
							
							int num2=arr[k][l];
							
							list.add(num2);
							
							rowSet.add(k);
							colSet.add(l);
							
							
							for(int m=0;m<4;m++){
								 if(rowSet.contains(m))
									 continue;
								 
								for(int n=0;n<4;n++){
									if(colSet.contains(n) || rowSet.contains(m)){
										continue;
									}
									int num3=arr[m][n];
									
									list.add(num3);
									rowSet.add(m);
									colSet.add(n);
									
									for(int o=0;o<4;o++){
										 if(rowSet.contains(o))
											 continue;
										 
										for(int p=0;p<4;p++){
											if(colSet.contains(o) || rowSet.contains(p)){
												continue;
											}
											int num4=arr[o][p];
											
											list.add(num4);
											rowSet.add(o);
											colSet.add(p);
											
											for(int a:list){
												System.out.print(a+" ");
											}
											System.out.println();
										}
									}
									rowSet=new HashSet<>();
									colSet=new HashSet<>();
									
								}
							}
							
						}
					}
					
					rowSet=null;
					colSet=null;
					if(list.size()==4){
						for(int a: list){
							System.out.print(a+ " ");
						}
						count++;
						System.out.println();
					}
					
					
				}
			}
         //System.out.println(count);
		}

	}
	public static void FindMax(int arr[][]){



		for(int i=0;i<4;i++){
			for(int j=0;j<4;j++){
				HashSet<Integer> rowSet=new HashSet<>();
				HashSet<Integer> colSet=new HashSet<>();
				ArrayList<Integer> list=new ArrayList<>();
				list.add(arr[i][j]);			
				rowSet.add(i);
				colSet.add(j);
				FindMax2(arr,list,rowSet,colSet,maxSum);


			}

		}


	}
	private static void FindMax2(int[][] arr, ArrayList<Integer> list, HashSet<Integer> rowSet, HashSet<Integer> colSet, int maxSum) {
		// TODO Auto-generated method stub

		for(int i=0;i<4;i++){
			if(rowSet.contains(i))
				continue;
			for(int j=0;j<4;j++){
				if(colSet.contains(j) ){
					continue;
				}

				list.add(arr[i][j]);			
				rowSet.add(i);
				colSet.add(j);
				FindMax3(arr,list,rowSet,colSet,maxSum);	
				rowSet.remove(i);
				colSet.remove(j);

			}			
		}

	}
	private static void FindMax3(int[][] arr, ArrayList<Integer> list, HashSet<Integer> rowSet, HashSet<Integer> colSet,
			int maxSum) {


		for(int i=0;i<4;i++){
			if(rowSet.contains(i))
				continue;
			for(int j=0;j<4;j++){
				if(colSet.contains(j)){
					continue;
				}

				list.add(arr[i][j]);			
				rowSet.add(i);
				colSet.add(j);
				FindMax4(arr,list,rowSet,colSet,maxSum);	

				rowSet.remove(i);
				colSet.remove(j);

			}			
		}

	}
	private static void FindMax4(int[][] arr, ArrayList<Integer> list, HashSet<Integer> rowSet, HashSet<Integer> colSet,
			int maxSum) {
		int rem=0;
		for(int i=0;i<4;i++){
			if(rowSet.contains(i))
				continue;
			for(int j=0;j<4;j++){
				if(colSet.contains(j)){
					continue;
				}

				list.add(arr[i][j]);			
				/*rowSet.add(i);
				colSet.add(j);*/
				rem=j;			

				//Collections.sort(list);
				if(list.size()==4){
					count++;
					for(Integer num: list){
						System.out.print(num+" ");
					}
					System.out.println();
				}



				//System.out.println(" in last :"+i+" "+j);
			}
		}


	}

}

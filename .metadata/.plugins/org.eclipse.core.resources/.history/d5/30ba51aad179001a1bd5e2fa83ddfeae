import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class UnitGCD2 {

	static public void main(String[] args) throws Exception{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int t=Integer.parseInt(br.readLine());


		while(t-->0){
			solve(br);	
		}

	}

	private static void solve(BufferedReader br) throws Exception {
		// TODO Auto-generated method stub
		int n=Integer.parseInt(br.readLine());
		PrintWriter out=new PrintWriter(System.out);
		HashSet<Integer> set=new HashSet<>();
		
		for(int i=1;i<=n;i++){
			if(set.contains(i)){
				continue;
			}
			ArrayList<Integer> tempList=new ArrayList<>();
			tempList.add(i);
			set.add(i);
			for(int j=i+1;j<=n;j++){
				if(set.contains(j)){
					continue;
				}
				boolean isCoPrime=true;
				for(int element: tempList){
					if(gcd(element,j)!=1){
						isCoPrime=false;
						break;
					}
				}
				if(isCoPrime){
					tempList.add(j);
					set.add(j);
				}
				
			}
			
			for(int printElem:tempList){
				out.print(printElem+" ");
			}
			out.println();
		}
		
		
		out.flush();
		out.close();


	}
	static int gcd(int a,int b){
		if(a==0)
			return b;
		
		return gcd(b%a,a);		
		
	}
	
	static HashSet<Integer> getPrimes(int n,ArrayList<Integer> primeList) 
	    { 
	        // Create a boolean array "prime[0..n]" and initialize 
	        // all entries it as true. A value in prime[i] will 
	        // finally be false if i is Not a prime, else true. 
		 
		   //ArrayList<Integer> primeList=new ArrayList<>();
		 HashSet<Integer> set=new HashSet<>();
	        boolean prime[] = new boolean[n+1]; 
	        for(int i=0;i<=n;i++) 
	            prime[i] = true; 
	          
	        for(int p = 2; p*p <=n; p++) 
	        { 
	            // If prime[p] is not changed, then it is a prime 
	            if(prime[p] == true) 
	            { 
	                // Update all multiples of p 
	                for(int i = p*p; i <= n; i += p) 
	                    prime[i] = false; 
	            } 
	        } 
	          
	        // Print all prime numbers 
	        for(int i = 2; i <= n; i++) 
	        { 
	            if(prime[i] == true) 
                primeList.add(i);
	            else
	            set.add(i);	
	         } 
	        
	        return set;
	    } 

}

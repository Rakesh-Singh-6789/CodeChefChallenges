import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Divisors {

	
		static public void main(String[] args) throws Exception{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			int t=Integer.parseInt(br.readLine());


			while(t-->0){
				System.out.println(solve(br));	
			}

		}

		private static int solve(BufferedReader br) throws IOException {
			// TODO Auto-generated method stub
			StringTokenizer st=new StringTokenizer(br.readLine());
			
			
			
			int x=Integer.parseInt(st.nextToken());
		    int k=Integer.parseInt(st.nextToken());
		    
		    if(x<=k){
		    	return 0;
		    }else{
		    	if(k==1){
		    		return 1;
		    	}else{
		    		int divisors=divCount(x);
		    		
		    		if(divisors-1>k){
		    			return 1;
		    		}else{
		    			return 0;
		    		}
		    		
		    	}
		    	
		    
		    
		    
		    }
		
		
		}
		
		static int divCount(int n) 
		{ 
			// sieve method for prime calculation 
			boolean hash[] = new boolean[n + 1]; 
			//Arrays.fill(hash, true); 
			for (int p = 2; p * p < n; p++) 
				if (hash[p] == false) 
					for (int i = p * 2; i < n; i += p) 
						hash[i] = true; 

			// Traversing through 
			// all prime numbers 
			int total = 1; 
			for (int p = 2; p <= n; p++) 
			{ 
				if (hash[p]==false) 
				{ 

					// calculate number of divisor 
					// with formula total div = 
					// (p1+1) * (p2+1) *.....* (pn+1) 
					// where n = (a1^p1)*(a2^p2).... 
					// *(an^pn) ai being prime divisor 
					// for n and pi are their respective 
					// power in factorization 
					int count = 0; 
					if (n % p == 0) 
					{ 
						while (n % p == 0) 
						{ 
							n = n / p; 
							count++; 
						} 
						total = total * (count + 1); 
					} 
				} 
			} 
			return total; 
		} 
	}



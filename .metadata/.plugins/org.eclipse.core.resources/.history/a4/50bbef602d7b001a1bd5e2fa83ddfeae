import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.StringTokenizer;

public class SquaredSubsequence {

	static private PrintWriter out=new PrintWriter(System.out);
	static public void main(String[] args) throws Exception{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int t=Integer.parseInt(br.readLine());


		while(t-->0){
			solve(br);	
		}

		out.flush();
		out.close();
	}
	private static void solve(BufferedReader br) throws Exception{
		// TODO Auto-generated method stub

		int n=Integer.parseInt(br.readLine());
		int arr[]=new int[n];
		long count=0;
		BigInteger biTwo=BigInteger.valueOf(2);
		BigInteger biFour=BigInteger.valueOf(4);
		BigInteger biZero=BigInteger.ZERO;

		StringTokenizer st=new StringTokenizer(br.readLine());
		for(int i=0;i<n;i++){
			int num=Integer.parseInt(st.nextToken());
			
			if(num%2==0){
				arr[i]=2;
			}else{
				arr[i]=0;
			}
		}

		
		out.println(countEvenSum(arr, n));

	}
	
	
	static int countEvenSum(int arr[], 
			int n) 
	{ 
		
		int temp=0;

		// Initialize count. sum is 
		// sum of elements under modulo 
		// 2 and ending with arr[i]. 
		int result = 0, sum = 0; 

		// i'th iteration computes sum 
		// of arr[0..i] under modulo 2 
		// and increments even/odd count 
		// according to sum's value 
		for (int i = 0; i <= n - 1; i++) 
		{ 
			// 2 is added to handle 
			// negative numbers 
			sum+=arr[i]; 

			// Increment even/odd count 
			if(sum>2 || sum==0)
			temp++; 
		} 

		// Use handshake lemma to 
		// count even subarrays 
		// (Note that an even cam 
		// be formed by two even 
		// or two odd) 
		result = result + (temp * 
				(temp - 1) / 2); 
		 

		return (result); 
	} 
}
